@{
    ViewData["Title"] = "Independent Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model IEnumerable<IndependentProject.Models.Settlement>

<form class="results">
    <select name="name" id="name">
        @foreach (var org in ViewBag.Origin)
        {
            <option value="@org["origin"]">@org["origin_en"]</option>

        }
    </select>


    <input type="submit" value="send" />
</form>


    <div id="container1" style="position: relative; width: 1000px; height: 900px;"></div>
    
    <script>

        // Mix and match ways to specify how arcs are drawn
        var jsonData = "http://data.unhcr.org/api/stats/time_series.json?year=2013&country_of_origin=" + $("name").val() + "SYR&population_type_code=RF";
 function drawArc(){

     
     

      d3.json("http://data.unhcr.org/api/stats/time_series.json?year=2013&country_of_origin="+$("#name").val() +"&population_type_code=RF", function (d) {
          var dataset = {};
          var onlyValues = [];
           Object.keys(d).map(function (key) {
              if (d[key]["value"] === null) {
                  onlyValues.push(0);
              }
              else {
                  onlyValues.push(parseInt(d[key]["value"]));

              }
          });
          console.log(onlyValues);
          var minValue = Math.min.apply(null, onlyValues);
          var maxValue = Math.max.apply(null, onlyValues);
          console.log(minValue);
          console.log(maxValue);
          var paletteScale = d3.scale.linear()
              .domain([minValue, maxValue])
              .range(["#EFEFFF", "#02386f"]);

          Object.keys(d).forEach(function (key) {
              var refugees;
              var iso = d[key]["country_of_residence"];
              if (d[key]["value"]) {
                  refugees = parseInt(d[key]["value"]);
              }
              else {
                  refugees = 0

              }
              dataset[iso] = { Refugees: refugees, fillColor: paletteScale(refugees) };
          });
          console.log(dataset);
   

    
    var map = new Datamap({
        
        element: document.getElementById("container1"),
        projection: 'mercator',
        fills: { defaultFill: '#F5F5F5' },
        data: dataset,
        geographyConfig: {
            popupTemplate: function (geo, data) {
                if (!data) { return; }
                return ['<div class="hoverinfo">',
                    '<strong>', geo.properties.name, '</strong>',
                    '<br>Total Refugees:<strong>', data.Refugees, '</strong>',
                    '</div>'].join('');

            }

        }

    });

   map.legend({legendTitle: "map legend",labels:{paletteScale}})
   var arcs = [];




   for (var key in d) {
        var obj = d[key];
        if (obj.value != null) {
            arcs.push({
                origin: obj.country_of_origin,
                destination: obj.country_of_residence,
                options: {
                    strokeColor: "blue",
                    strokeWidth: .5
                } // tack on options for each one
            });
        }   
        map.arc(arcs);
   }

  
});
      
 }



      

    </script>
